<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>单例模式-闭包实现全局弹框</title>
    <url>/2020/08/03/dan-li-mo-shi-bi-bao-shi-xian-quan-ju-dan-kuang/</url>
    <content><![CDATA[<h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><p><strong>定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点</strong>，这样的模式就叫做单例模式。</p>
<p>举例：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SingleDog</span> <span class="token punctuation">{</span>
    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这个是单例模式"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span>SingleDog<span class="token punctuation">.</span>instance<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">//判断是否已经new过一个实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SingleDog<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//不存在则new一个</span>
            SingleDog<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> SingleDog<span class="token punctuation">.</span>instance
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> s2 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span></code></pre>
<h3 id="全局弹框"><a href="#全局弹框" class="headerlink" title="全局弹框"></a>全局弹框</h3><p>这里使用闭包定义了一个弹框对象，不管调用多少次，都是返回同一个实例。  </p>
<p>举例：</p>
<pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>单例模式弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
    <span class="token selector"><span class="token id">#modal</span> </span><span class="token punctuation">{</span>
        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
        <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>
        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>open<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>打开弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关闭弹框<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
    <span class="token keyword">const</span> Modal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> modal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定义modal"</span><span class="token punctuation">,</span>modal<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>modal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用了1"</span><span class="token punctuation">,</span>modal<span class="token punctuation">)</span>
                modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>
                modal<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'我是全局唯一一个modal'</span>
                modal<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'modal'</span>
                modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>modal<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"调用了2"</span><span class="token punctuation">,</span>modal<span class="token punctuation">)</span>
            <span class="token keyword">return</span> modal
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//打开弹窗</span>
        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> modal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>闭包</tag>
        <tag>单例模式</tag>
        <tag>全局弹框</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/2020/08/02/chou-xiang-gong-han-mo-shi/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一个简单的工厂，例如苹果厂，香蕉厂，它们的作用是单一的，只生产一种水果，那么抽象工厂就是将他们之间抽象出来，直接是水果厂，当你想增加一个西瓜厂的时候，只需要extends 水果厂，就可以扩展了。  </p>
<p>那么它的好处是什么？  </p>
<ul>
<li>高内聚，低耦合。业务分离，不会互相干扰</li>
<li>可维护性和可扩展性大大增强</li>
<li>不会修改引入 </li>
</ul>
<p>它能解决什么？</p>
<ul>
<li>复杂场景下，各个业务模块的解耦合，当抽象模式下某一环出现了问题，可以轻松修改这个问题，不会影响到其他代码，因此一个工程模块再复杂，只要合理的运用，合理的分配模块粒度，后期代码即使被修改了，也不会有重大的改动。</li>
</ul>
<h2 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//抽象手机工厂</span>
<span class="token keyword">class</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token punctuation">}</span>
    <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象方法不能直接调用，需要重写！"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//具体工厂</span>
<span class="token keyword">class</span> <span class="token class-name">FakeFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">'android'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AppleOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//抽象工厂</span>
<span class="token keyword">class</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象产品不允许直接调用，需要重写"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//具体工厂</span>
<span class="token keyword">class</span> <span class="token class-name">AndroidOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我会用安卓的方式创建手机"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//具体工厂</span>
<span class="token keyword">class</span> <span class="token class-name">AppleOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>
    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我会用苹果的方式创建手机"</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> myPhone  <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">FakeFactory</span><span class="token punctuation">(</span><span class="token string">"android"</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> myOS <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
myOS<span class="token punctuation">.</span><span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>抽象工厂模式</tag>
      </tags>
  </entry>
  <entry>
    <title>删除数组中的重复项</title>
    <url>/2020/07/30/shan-chu-shu-zu-zhong-de-chong-fu-xiang/</url>
    <content><![CDATA[<p>给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-js"><code class="language-js">给定数组 nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 

函数应该返回新的长度 <span class="token number">2</span><span class="token punctuation">,</span> 并且原数组 nums 的前两个元素被修改为 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>。 

你不需要考虑数组中超出新长度后面的元素。</code></pre>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>双指针的解法，两个指针分别是字符串的头和尾，先是循环对比，等到i和j不同时，判断左指针右移之后的是不是回文，是的话就返回true，再判断右指针左移之后是不是回文，是也返回true，否则默认返回false.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> validPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> s
    <span class="token keyword">let</span> len  <span class="token operator">=</span> s<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> j <span class="token operator">=</span> len<span class="token number">-1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//左指针前诺一位，判断是不是回文</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalid</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断字符串的left-right是不是回文</span>
    <span class="token keyword">function</span> <span class="token function">isPalid</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!==</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            left<span class="token operator">++</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>每日随笔</title>
    <url>/2020/07/29/mei-ri-sui-bi/</url>
    <content><![CDATA[<h3 id="2020-7-29"><a href="#2020-7-29" class="headerlink" title="2020.7.29"></a>2020.7.29</h3><ol>
<li><p>学习了一道回文算法题，核心是双指针的解法。</p>
</li>
<li><p>开始学习设计模式。</p>
</li>
<li><p>开始一个计划-每日10点到12点编码。编码时间～就要开始啦</p>
</li>
<li><p>12点啦，希望今天是一个好的开始，早日能成为厉害的人～加油～～</p>
</li>
</ol>
<h3 id="2020-7-30"><a href="#2020-7-30" class="headerlink" title="2020.7.30"></a>2020.7.30</h3><p>1.算法题：删除数组中的元素。双指针解法（独立解决）</p>
<h2 id="2020-8-2"><a href="#2020-8-2" class="headerlink" title="2020. 8.2"></a>2020. 8.2</h2><p>今天周末去购物中心玩了一天，回到家竟然还有精力学习？？我感觉我变了哈哈～～。</p>
<p>今天学习了抽象工厂的设计模式，简单的总结出了一篇博客，后续会继续补充。 </p>
<p>突然发现写博客真的很有意思，一是可以记录一下你学了什么知识，二是可以对学的内容进行一个复盘总结。 </p>
<p>好了，12点了，晚安。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>计划</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>验证回文字符串-删除一位</title>
    <url>/2020/07/29/yan-zheng-hui-wen-zi-fu-chuan-shan-chu-yi-wei/</url>
    <content><![CDATA[<p>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"aba"</span>
输出<span class="token punctuation">:</span> True</code></pre>
<p><strong>注意:</strong></p>
<ol>
<li>字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。</li>
</ol>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>双指针的解法，两个指针分别是字符串的头和尾，先是循环对比，等到i和j不同时，判断左指针右移之后的是不是回文，是的话就返回true，再判断右指针左移之后是不是回文，是也返回true，否则默认返回false。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> validPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> s
    <span class="token keyword">let</span> len  <span class="token operator">=</span> s<span class="token punctuation">.</span>length
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">let</span> j <span class="token operator">=</span> len<span class="token number">-1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">===</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
        j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//左指针前诺一位，判断是不是回文</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalid</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPalid</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">//判断字符串的left-right是不是回文</span>
    <span class="token keyword">function</span> <span class="token function">isPalid</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">!==</span>str<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            left<span class="token operator">++</span>
            right<span class="token operator">--</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>有效的括号</title>
    <url>/2020/07/27/you-xiao-de-gua-hao/</url>
    <content><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p>
<p>有效字符串需满足：</p>
<p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"()"</span>
输出<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<p><strong>示例 2:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"()[]{}"</span>
输出<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<p><strong>示例 3:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"(]"</span>
输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre>
<p><strong>示例 4:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"([)]"</span>
输出<span class="token punctuation">:</span> <span class="token boolean">false</span></code></pre>
<p><strong>示例 5:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"{[]}"</span>
输出<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>栈的规律，先进后出。定义好map，存放左右括号。定义好栈、栈的顶部标记。</li>
<li>字符串入栈时，如果是左括号则进栈，右括号则消除。</li>
<li>符合要求的字符串在栈中一定是空的，因此可判断  </li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * @param {string} s
 * @return {boolean}
 */</span>
<span class="token keyword">var</span> isValid <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'{'</span><span class="token punctuation">:</span><span class="token string">'}'</span><span class="token punctuation">,</span>
        <span class="token string">'['</span><span class="token punctuation">:</span><span class="token string">']'</span><span class="token punctuation">,</span>
        <span class="token string">'('</span><span class="token punctuation">:</span><span class="token string">')'</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> strack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//左括号一律进去</span>
            strack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
            top<span class="token operator">++</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>strack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//栈顶元素等于新进来的元素则清除</span>
            strack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            top<span class="token operator">--</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strack<span class="token punctuation">.</span>length<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>罗马数字转整数</title>
    <url>/2020/07/24/luo-ma-shu-zi-zhuan-zheng-shu/</url>
    <content><![CDATA[<h3 id="力扣第13题"><a href="#力扣第13题" class="headerlink" title="力扣第13题"></a>力扣第13题</h3><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>
<pre class=" language-js"><code class="language-js">字符          数值
I             <span class="token number">1</span>
V             <span class="token number">5</span>
X             <span class="token number">10</span>
L             <span class="token number">50</span>
C             <span class="token number">100</span>
D             <span class="token number">500</span>
M             <span class="token number">1000</span></code></pre>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<ul>
<li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li>
<li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li>
<li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li>
<li>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</li>
</ul>
<p><strong>示例 1:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"III"</span>
输出<span class="token punctuation">:</span> <span class="token number">3</span></code></pre>
<p><strong>示例 2:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"IV"</span>
输出<span class="token punctuation">:</span> <span class="token number">4</span></code></pre>
<p><strong>示例 3:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"IX"</span>
输出<span class="token punctuation">:</span> <span class="token number">9</span></code></pre>
<p><strong>示例 4:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"LVIII"</span>
输出<span class="token punctuation">:</span> <span class="token number">58</span>
解释<span class="token punctuation">:</span> L <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> V<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> III <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">.</span></code></pre>
<p><strong>示例 5:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token string">"MCMXCIV"</span>
输出<span class="token punctuation">:</span> <span class="token number">1994</span>
解释<span class="token punctuation">:</span> M <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> CM <span class="token operator">=</span> <span class="token number">900</span><span class="token punctuation">,</span> XC <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span> IV <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">.</span></code></pre>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol>
<li>先考虑正常情况，创建一个map，此处用对象代替，通过循环累加值。</li>
<li>再考虑特殊情况，创建另一个特殊情况map</li>
<li>遍历到当前的罗马数字的时候，判断一下当前的罗马数字和前一位罗马数字相加，是否等于特殊map里的值，是的话就加上特殊map的值，再减去前一位的值。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> romanToInt <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'I'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token string">"V"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
        <span class="token string">"X"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token string">"L"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
        <span class="token string">"C"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token string">"D"</span><span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>
        <span class="token string">"M"</span><span class="token punctuation">:</span> <span class="token number">1000</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> map2 <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">'IV'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
        <span class="token string">'IX'</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
        <span class="token string">'XL'</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>
        <span class="token string">'XC'</span><span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>
        <span class="token string">'CD'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>
        <span class="token string">'CM'</span><span class="token punctuation">:</span> <span class="token number">900</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map2<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token operator">+</span><span class="token operator">=</span>map2<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token operator">+</span><span class="token operator">=</span>map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回文数</title>
    <url>/2020/07/24/hui-wen-shu/</url>
    <content><![CDATA[<h3 id="力扣第9题"><a href="#力扣第9题" class="headerlink" title="力扣第9题"></a>力扣第9题</h3><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-jsj"><code class="language-jsj">输入: 121
输出: true</code></pre>
<p><strong>示例 2:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">121</span>
输出<span class="token punctuation">:</span> <span class="token boolean">false</span>
解释<span class="token punctuation">:</span> 从左向右读<span class="token punctuation">,</span> 为 <span class="token operator">-</span><span class="token number">121</span> 。 从右向左读<span class="token punctuation">,</span> 为 <span class="token number">121</span><span class="token operator">-</span> 。因此它不是一个回文数。</code></pre>
<p><strong>示例 3:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token number">10</span>
输出<span class="token punctuation">:</span> <span class="token boolean">false</span>
解释<span class="token punctuation">:</span> 从右向左读<span class="token punctuation">,</span> 为 <span class="token number">01</span> 。因此它不是一个回文数。</code></pre>
<p><strong>进阶:</strong></p>
<p>你能不将整数转为字符串来解决这个问题吗？</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>字符串反转、或者切割成数组反转</li>
<li>数学解法</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//常规字符串反转</span>
<span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> x<span class="token operator">+</span><span class="token string">''</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token operator">+</span><span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>str <span class="token operator">===</span> res<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//调用内置方法</span>
<span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 缓存字符串的长度</span>
      <span class="token keyword">let</span> str <span class="token operator">=</span> x<span class="token operator">+</span><span class="token string">''</span>
    <span class="token keyword">const</span> reverseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> str <span class="token operator">===</span> reverseStr
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//对称解决方法</span>
<span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 缓存字符串的长度</span>
      <span class="token keyword">let</span> str <span class="token operator">=</span> x<span class="token operator">+</span><span class="token string">''</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length
    <span class="token comment" spellcheck="true">// 遍历前半部分，判断和后半部分是否对称</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//数学解法</span>
<span class="token keyword">var</span> isPalindrome <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">**</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> n<span class="token punctuation">)</span> <span class="token operator">!==</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">%</span> n<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>整数反转</title>
    <url>/2020/07/24/zheng-shu-fan-zhuan/</url>
    <content><![CDATA[<h3 id="力扣第七题"><a href="#力扣第七题" class="headerlink" title="力扣第七题"></a>力扣第七题</h3><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-javascript"><code class="language-javascript">输入<span class="token punctuation">:</span> <span class="token number">123</span>
输出<span class="token punctuation">:</span> <span class="token number">321</span></code></pre>
<p> <strong>示例 2:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">123</span>
输出<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">321</span></code></pre>
<p><strong>示例 3:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token number">120</span>
输出<span class="token punctuation">:</span> <span class="token number">21</span></code></pre>
<p><strong>注意</strong></p>
<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0.</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js">整数<span class="token keyword">var</span> reverse <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> x<span class="token operator">+</span><span class="token string">''</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        res <span class="token operator">=</span> <span class="token operator">-</span>res
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">&lt;</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">||</span> res<span class="token operator">></span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res<span class="token operator">*</span><span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul>
<li><p>总体思路是转字符串，然后反转。需要注意负数情况和数值范围</p>
</li>
<li><p>Math.pow：pow() 方法可返回 x 的 y 次幂的值。</p>
</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/2020/07/24/liang-shu-zhi-he/</url>
    <content><![CDATA[<h3 id="力扣第一题"><a href="#力扣第一题" class="headerlink" title="力扣第一题"></a>力扣第一题</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p>
<p>示例:</p>
<p>给定 nums = [2, 7, 11, 15], target = 9</p>
<p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//普通解法</span>
<span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> target <span class="token operator">&amp;&amp;</span> i<span class="token operator">!==</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 一层for循环 用空间换时间。使用了map解法</span>
<span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!==</span>undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// Es6 Map解决方法</span>

<span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>两种思路</p>
<ol>
<li>暴力解法，两个for循环去解决，时间复杂度O(n*n)，空间复杂度O(1)</li>
<li>map解法，只需要遍历一次，空间换时间。时间复杂度O(n)，空间复杂度O(n)</li>
</ol>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最长公共前缀</title>
    <url>/2020/07/24/zui-chang-gong-gong-qian-zhui/</url>
    <content><![CDATA[<h3 id="力扣14题"><a href="#力扣14题" class="headerlink" title="力扣14题"></a>力扣14题</h3><p>问题：编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>""</code>。</p>
<p><strong>示例 1:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span><span class="token string">"flow"</span><span class="token punctuation">,</span><span class="token string">"flight"</span><span class="token punctuation">]</span>
输出<span class="token punctuation">:</span> <span class="token string">"fl"</span></code></pre>
<p><strong>示例 2:</strong></p>
<pre class=" language-js"><code class="language-js">输入<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"racecar"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span>
输出<span class="token punctuation">:</span> <span class="token string">""</span>
解释<span class="token punctuation">:</span> 输入不存在公共前缀。</code></pre>
<p><strong>说明:</strong></p>
<p>所有输入只包含小写字母 <code>a-z</code> 。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * @param {string[]} strs
 * @return {string}
 */</span>
<span class="token keyword">var</span> longestCommonPrefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token operator">==</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">''</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> flag <span class="token operator">=</span> strs<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token operator">+</span><span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> res
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul>
<li>利用js Array.property.every()方法，该方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>
<li>只需要拿出传入数组的某一个字符串，通过这个字符串所遍历指针去跟数组里所有的字符串进行一一对比，就能得到公共前缀</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端vw+rem布局</title>
    <url>/2020/06/29/yi-dong-duan-vw-rem-bu-ju/</url>
    <content><![CDATA[<ul>
<li>vw：vw单位是以视口宽度而言的百分比单位，1vw相当于视口宽度的1%</li>
<li>rem：相对于根元素即html的fonts-size定义的单位。如html的font-size为 16px，则1rem = 16px<br>在移动端，vw配合rem的布局的思路为：在根结点即html设置font-size为vw单位，在文本字体、布局高宽、间距等设置rem单位。<br>这样做，视口大小改变，则html元素的font-size改变，设置为rem单位的元素也发生改变，因此就增强了响应式体验。</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>移动端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包的理解</title>
    <url>/2020/06/16/bi-bao-de-li-jie/</url>
    <content><![CDATA[<h2 id="闭包是什么？"><a href="#闭包是什么？" class="headerlink" title="闭包是什么？"></a>闭包是什么？</h2><p>定义： 可以访问其他函数作用域内变量的函数叫做闭包(js高程)。<br>举例： 比如说函数A内部有个函数B，函数B可以访问到A中的变量，那么函数B就是闭包。<br>用途： 可以在外部<strong>间接访问</strong>函数内部的变量</p>
<h2 id="闭包会引起内存泄漏？"><a href="#闭包会引起内存泄漏？" class="headerlink" title="闭包会引起内存泄漏？"></a>闭包会引起内存泄漏？</h2><p>错。内存泄漏是指用不到的变量，依然占据着内存空间，不能被再次利用起来。 而闭包里的变量是我们需要的变量，不能说是内存泄漏。那么，这个内存泄漏的说法是哪儿来的？答案是IE的一个bug，IE在我们使用完闭包后，回收不了闭包里引用的变量。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript数据类型转换</title>
    <url>/2020/06/15/javascript-shu-ju-lei-xing-zhuan-huan/</url>
    <content><![CDATA[<p>js是一门动态弱类型语言，使得在开发时提供了很多便利，但坑点大多也是来源于此，因此，搞懂了类型转换的细节就能避免多数开发时遇到的坑，本文将用最短的文字来解释清楚类型转换。</p>
<h3 id="1-类型转换的区别"><a href="#1-类型转换的区别" class="headerlink" title="1. 类型转换的区别"></a>1. 类型转换的区别</h3><p>主要是分为显式转换和隐式转换：  </p>
<ul>
<li>显式转换：使用Boolean()、String()、Number()等构造器</li>
<li>隐式转换：==、加减乘除、if判断等方式转换</li>
</ul>
<h3 id="2-类型转换的规则"><a href="#2-类型转换的规则" class="headerlink" title="2. 类型转换的规则"></a>2. 类型转换的规则</h3><p>显式的类型转换规则很简单，就是按照规定的构造器转换。而隐式的转换规则较为麻烦，以下来解释不同场景下的隐式规则。  </p>
<h4 id="1-转换规则"><a href="#1-转换规则" class="headerlink" title="1. ==转换规则"></a>1. ==转换规则</h4><ol>
<li>先比较两边类型是否相同，相同则不用转换。引用类型比较的是内存地址是否相同。</li>
<li>类型不同，则开始进行类型转换，首先判断两边是否为 null 和 undefined，是则返回true，不是则继续判断。</li>
<li>判断是否是string和number比较，是则string转为number，不是则继续判断。</li>
<li>判断是否是boolean和任意比较，是则boolean转为number，不是则继续判断。</li>
<li>判断一方是object类型并且另一方是string、number或symbol，是则把object转换为基本数据类型再比较。</li>
</ol>
<h4 id="2-object类型转基本数据类型的规则："><a href="#2-object类型转基本数据类型的规则：" class="headerlink" title="2.object类型转基本数据类型的规则："></a>2.object类型转基本数据类型的规则：</h4><p>对象在转换类型时，会调用内置的[[ToPrimitive]]函数，规则如下：</p>
<ul>
<li>已经是基础类型，则不转换</li>
<li>调用valueOf()，若结果为基础类型，就返回转换的值</li>
<li>调用toString()，若结果为基础类型，就返回转换的值</li>
<li>如果都没返回基础类型，则报错</li>
</ul>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>vue单文件拆分之mixins</title>
    <url>/2020/05/25/vue-dan-wen-jian-chai-fen-zhi-mixins/</url>
    <content><![CDATA[<p>今天get到一个解决方案，关于单vue组件过大拆分的问题。<br>举个例子，有个test的文件，里面的代码量很大，之前是这样解决的：拆分成多个.vue文件，通过组件引入的方式，每个.vue文件都要写template、script。调用子组件的方式需要通过ref。<br>存在的问题：只想引用js，却需要按照通用组件的方式引入，并且每个都需要写template和一个div，带来性能损耗。<br>解决方案：使用vue.js mixins，将不同的逻辑放到不同的js文件里，方法直接通过this调用。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>mixins.js </p>
<pre class=" language-javascript"><code class="language-javascript">    expord <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<p>在test里混合</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">import</span> mixins <span class="token keyword">from</span> <span class="token string">'../minxins.js'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixins<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>scrpit<span class="token operator">></span></code></pre>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>代码优化</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown特殊技巧</title>
    <url>/2020/01/16/markdown-te-shu-ji-qiao/</url>
    <content><![CDATA[<h2 id="第一式-文字变色"><a href="#第一式-文字变色" class="headerlink" title="第一式 文字变色"></a>第一式 文字变色</h2><pre><code>&lt;font face="黑体"&gt;黑体&lt;/font&gt;
&lt;font color="c7254e"&gt;文字变色！&lt;/font&gt;
&lt;table&gt;&lt;tr&gt;&lt;td bgcolor="c7254e"&gt;背景变色！&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre><p>效果如下:  </p>
<p><font face="黑体">黑体</font><br><font color="c7254e">文字变色！</font></p>
<table><tbody><tr><td bgcolor="c7254e">背景变色！</td></tr></tbody></table><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript模块化的理解</title>
    <url>/2020/01/16/javascript-mo-kuai-hua-de-li-jie/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发时经常会听到模块化，比如说<font color="#c7254e">CommonJS、AMD、CMD、ES6</font>模块化，但一直没有去了解这些到底是个啥，有什么用。今天在分析源码时就遇到了这些模块化的语法，因此认为还是有必要去了解一番的，在此做个总结。</p>
<p>疑问四部曲：什么是模块，什么时候使用模块化，模块化用在哪？解决了什么问题？<br>理解：模块就是将一个大文件拆分成多个独立且相互依赖的小模块，各个模块可以通过特定语法去引入其他模块，在代码量多、项目逐渐庞大时使用模块化，解决了以下问题：  </p>
<ol>
<li>利于维护，通过引入方式我们可以直观的了解依赖关系</li>
<li>多人开发时只负责自己独立的一块模块，不需要关心别人写的代码</li>
<li>不会造成命名冲突</li>
<li>…  </li>
</ol>
<h2 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h2><blockquote>
<p>CommonJS 是以在浏览器环境之外构建 JavaScript 生态系统为目标而产生的项目，比如在服务器和桌面环境中。<br>CommonJS 规范是为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，通过 require() 来导入其他模块的输出到当前模块作用域中。  </p>
</blockquote>
<p>Node.js开发者一定会对CommonJS眼熟，因为Node开发就是采用的CommonJS规范，demo如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// moduleA.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// moduleB.js</span>
<span class="token keyword">var</span> multiplyBy2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./moduleA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>上图的moduleA.js通过<font color="#c7254e">module.exports</font>导出了一个函数，moduleB.js通过<font color="#c7254e">require()</font>去获取了moduleA这个模块，调用了此函数<br>CommonJS加载模块是同步的，虽然是为了服务器和桌面环境产生的规范，但是也有浏览器端的实现。</p>
<h2 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h2><blockquote>
<p>AMD（异步模块定义）是为浏览器环境设计的，定义了一套 JavaScript 模块依赖异步加载标准，因为 CommonJS 模块系统是同步加载的，当前浏览器环境还没有准备好同步加载模块的条件。</p>
</blockquote>
<p>由于CommonJS是为了服务器和桌面设计的规范，是同步的，那么AMD的不同处就是为了浏览器环境设计的，是异步的，requireJS是基于AMD规范的模块化库。<br>模块通过<font color="#c7254e">define</font>函数定义在闭包中</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">:</span> String<span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">:</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">:</span> Function<span class="token operator">|</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><font color="#c7254e">id</font>是可选的，代表模块名。<br><font color="#c7254e">dependencies</font>也是可选的，代表指定所要依赖的模块列表，默认值是[“require”, “exports”, “module”]<br><font color="#c7254e">factory</font>是一个函数或对象，包裹的是模块的具体实现，如果是函数，那么它的返回值就是模块的输出接口或值。<br>光看文字理解起来比较复杂，我们来看看demo帮助理解:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//定义一个名字为myModule的模块，依赖于jQuery模块</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'myModule'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// $ 是 jquery 模块的输出</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//使用上面的模块</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'myModule'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>myModule<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>我们在使用myModule这个模块时，首先加载了jquery模块，并使用了jquery的语法在页面中输出了一句话，然后再触发回调function，去继续运行function内的代码，由此可见是一个异步的方式</p>
<h2 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h2><p>CMD与AMD相近，都是异步加载，用于浏览器环境中，seaJS是基于CMD规范的模块化库。<br>不同之处是</p>
<ol>
<li>AMD的模块是提前执行的，CMD是延迟执行的。</li>
<li>AMD推崇定义模块时就要声明依赖的模块(依赖前置)，CMD推崇只有用到某一个模块时再去加载模块(依赖就近)<br>demo如下:<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//AMD</span>
<span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./a'</span><span class="token punctuation">,</span><span class="token string">'./b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment" spellcheck="true">//可以直接使用依赖方法</span>
 a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ol>
<p>//CMD<br>define(function (requie, exports, module) {<br>    //需要使用的时候 在require<br>    var a = require(‘./a’);<br>    a.test();<br>});</p>
<pre><code>
## ES6模块化
ES6已经自带了模块化，而且使用方法更为简单，主要使用的的语法是&lt;font color="#c7254e"&gt;export&lt;/font&gt;和&lt;font color="#c7254e"&gt;import&lt;/font&gt;。demo如下:
### export/import 导入导出某变量/函数
1. 对变量的导入导出
```javascript
    //第一种导出
    export var name = 'lz'
    //第二种导出
    var name = 'lz'
    export { name }
    //导出的时候重命名
    export {name as newName}

    //导入
    import { name } from './test.js'
    //为变量重新定义名称导入
    import { name as newName } from './test.js'</code></pre><ol start="2">
<li><p>对函数的导出导入</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//第一种导出</span>
 <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//第二种导出</span>
 <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">export</span> <span class="token punctuation">{</span> sayHi <span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//导出的时候重命名</span>
 <span class="token keyword">export</span> <span class="token punctuation">{</span> sayHi <span class="token keyword">as</span> newFunction <span class="token punctuation">}</span>

 <span class="token comment" spellcheck="true">//导入</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> sayHi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test.js'</span>
 <span class="token comment" spellcheck="true">//为变量重新定义名称导入</span>
 <span class="token keyword">import</span> <span class="token punctuation">{</span> sayHi <span class="token keyword">as</span> newFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test.js'</span></code></pre>
</li>
<li><p>对变量函数的整体导入<br>之前的例子是针对某一个名称去导入，也可以整体导入</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> test <span class="token keyword">from</span> '<span class="token punctuation">.</span><span class="token operator">/</span>test<span class="token punctuation">.</span>js</code></pre>
<p>所有的输出值都加载到test这个对象上面，使用时就直接test.××。<br>注意一点，模块整体导入的对象是不允许运行时改变的</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//两者都是不允许的</span>
 test<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lz'</span>
 test<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
</li>
</ol>
<h3 id="export-defaut的使用"><a href="#export-defaut的使用" class="headerlink" title="export defaut的使用"></a>export defaut的使用</h3><p>之前都是已知函数名、变量名时进行的导入，当然，不需要知道变量/函数名也是可以导入导出。此处用到了<font color="#c7254e">export defaut</font>方法，为模块指定默认的输出。  </p>
<ol>
<li><p>匿名函数的导出导入</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//第一种导出</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//导入</span>
 <span class="token keyword">import</span> sayHi <span class="token keyword">from</span> <span class="token string">'./test.js'</span>
 <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>
</li>
<li><p>非匿名函数的导出导出</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//或者</span>
 <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> sayHi

 <span class="token comment" spellcheck="true">//上面代码定义的函数名，在模块外部加载是无效的，视为匿名函数</span>
 <span class="token keyword">import</span> sayHi <span class="token keyword">from</span> <span class="token string">'./test.js'</span>
 <span class="token comment" spellcheck="true">//或</span>
 <span class="token keyword">import</span> hello <span class="token keyword">from</span> <span class="token string">'./test'</span></code></pre>
</li>
<li><p>default的本质<br>default的本质其实就是输出一个叫做default的变量或方法，然后允许为它取任何名字。</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">export</span> <span class="token punctuation">{</span> sayHi <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//等价于</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> sayHi

 <span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> sayHi <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test.js'</span>
 <span class="token comment" spellcheck="true">//等价于</span>
 <span class="token keyword">import</span> sayHi <span class="token keyword">from</span> <span class="token string">'./test.js'</span></code></pre>
<p>所以看出default相当于输出了一个叫default的变量，以下是错误的声明</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//已经声明了一次 </span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
 <span class="token comment" spellcheck="true">//未声明，没有指定对外的接口</span>
 <span class="token keyword">export</span> <span class="token number">250</span></code></pre>
</li>
<li><p>export default和export同时使用</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//导出</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
 <span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

 <span class="token punctuation">}</span>
 <span class="token keyword">export</span> <span class="token punctuation">{</span> hello <span class="token keyword">as</span> helloWorld <span class="token punctuation">}</span>
 <span class="token comment" spellcheck="true">//导入</span>
 <span class="token keyword">import</span> sayHi<span class="token punctuation">,</span><span class="token punctuation">{</span> hello<span class="token punctuation">,</span> helloWorld <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./test.js'</span></code></pre>
<p>上面的hello和helloWorld都指向同一个方法，暴露出helloWorld，默认指向hello接口</p>
</li>
<li><p>export 也可以输出类</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">export</span> defalut <span class="token keyword">class</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span></code></pre>
<p>以上就是ES6模块化的基本使用方法。当然ES6的模块化不止这些，比如export和import复合写法、模块继承、跨模块常量等等，这些内容需要深入的学习ES6知识。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端模块化的内容暂时整理了这么多，后续学到会继续更新。从只听说过模块化，到现在能区分出各个模块的规范及使用方法，这次总结对我来言确实学习到了模块化方面的知识，希望对大家也能有所帮助。</p>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://es6.ruanyifeng.com/#docs/module#export-default-%E5%91%BD%E4%BB%A4" target="_blank" rel="noopener">阮一峰-ES6入门</a><br><a href="https://zhaoda.net/webpack-handbook/commonjs.html" target="_blank" rel="noopener">CommonJS规范和AMD规范</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手Markdown</title>
    <url>/2020/01/09/kuai-su-shang-shou-markdown/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么选用Markdown?<br>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>
<ol>
<li>易于阅读、具有良好的写作体验</li>
<li>大多数平台的支持，无缝接入</li>
<li>上手快，基本上看完这篇文章就能快速入门</li>
</ol>
<h2 id="第一式-标题的用法"><a href="#第一式-标题的用法" class="headerlink" title="第一式 标题的用法"></a>第一式 标题的用法</h2><ol>
<li>使用#号标记 代表一级标题到六级标题<pre><code># 一级
## 二级
### 三级
...</code></pre></li>
<li>使用=号和-标记 一级标题和二级标题<pre><code>一级标题
====
</code></pre></li>
</ol>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre><code>
## 第二式 段落格式
### 换行
Markdown的换行和一般的文字换行不同，需要两个空格+回车  
### 字体
Markdown可以使用斜体、粗体、粗斜体。  </code></pre><pre><code>*斜体文本*
_斜体文本_
**粗体文本**
__粗体文本__
***粗斜体文本***
___粗斜体文本___</code></pre><pre><code>### 分割线
分割线的写法有三种 连续的三个以上的星号、减号、底线，中间不能有除空格外的其他符号</code></pre><hr>
<hr>
<hr>
<hr>
<hr>
<pre><code>### 删除线
在文字中间添加两个波浪线~即可</code></pre><pre><code>~~hello~~</code></pre><pre><code>
### 带下划线文本
通过HTML的u标签实现</code></pre><p><u>带下划线的文本</u></p>
<pre><code>
### 脚注
脚注就是对文本的补充说明，Markdown脚注格式如下</code></pre><p>[^要注明的文本]</p>
<pre><code>
## 第三式 Markdown列表
Markdown支持有序列表和无序列表，可以使用*、+、-三种作为标记
### 有序列表和无序列表</code></pre><p>//有序列表</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<p>//无序列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项<pre><code>### 列表嵌套</code></pre><ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素<pre><code></code></pre></li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="第四式-区块"><a href="#第四式-区块" class="headerlink" title="第四式 区块"></a>第四式 区块</h2><h3 id="区块基本用法"><a href="#区块基本用法" class="headerlink" title="区块基本用法"></a>区块基本用法</h3><p>Markdown区块是在段落开头使用&gt;符号，后面紧跟一个空格</p>
<pre><code>   &gt; 区块引用</code></pre><h3 id="嵌套区块"><a href="#嵌套区块" class="headerlink" title="嵌套区块"></a>嵌套区块</h3><pre><code>    &gt; 最外层
    &gt; &gt; 第一层
    &gt; &gt; &gt; 第二层
    ...以此类推</code></pre><h2 id="第五式-代码块"><a href="#第五式-代码块" class="headerlink" title="第五式 代码块"></a>第五式 代码块</h2><p>一行段落中有一句代码片段，可以使用`包起来</p>
<pre><code>    `console.log()`</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>代码区块一般有两种方式<br>第一种是使用4个空格的方式，第二种是```包裹，并指定一种语言，当然也可以不指定</p>
<pre><code>    （```javascript
        console.log("test")
      ```）</code></pre><h2 id="第六式-链接"><a href="#第六式-链接" class="headerlink" title="第六式 链接"></a>第六式 链接</h2><p>链接使用方法如下</p>
<pre><code>    [链接名称](链接地址)
    或
    &lt;链接地址&gt;
    //demo
    这是一个链接 [百度搜索](https://www.baidu.com)
    &lt;https://www.baidu.com&gt;</code></pre><h3 id="变量链接"><a href="#变量链接" class="headerlink" title="变量链接"></a>变量链接</h3><pre><code>    这个链接用 1 作为网址变量 [百度搜索][1]
    这个链接用 runoob 作为网址变量 [百度搜索][test]
    一般在文档结尾为变量赋值（网址）

    [1]: http://www.google.com/
    [test]: http://www.runoob.com/</code></pre><h2 id="第七式-图片"><a href="#第七式-图片" class="headerlink" title="第七式 图片"></a>第七式 图片</h2><p>Markdown图片语法格式如下</p>
<pre><code>    ![alt 替代文字](图片地址)
    ![alt 替代文字](图片地址 "可选的标题")

    //demo
    ![百度网页](https://www.baidu.com)</code></pre><h3 id="变量图片"><a href="#变量图片" class="headerlink" title="变量图片"></a>变量图片</h3><p>也可以像链接那样，地址放在结尾</p>
<pre><code>这个链接用 1 作为网址变量 ![RUNOOB][1].
然后在文档的结尾位变量赋值（网址）

[1]: http://static.runoob.com/images/runoob-logo.png</code></pre><h3 id="控制图片大小"><a href="#控制图片大小" class="headerlink" title="控制图片大小"></a>控制图片大小</h3><p>Markdown的语法无法控制图片大小,但是可以使用img标签控制</p>
<pre><code>    &lt;img src="http://***.png" width="50%" /&gt;</code></pre><h2 id="第九式-表格"><a href="#第九式-表格" class="headerlink" title="第九式 表格"></a>第九式 表格</h2><p>Markdown是使用|来分割不同单元格的，语法如下</p>
<pre><code>    |  表头   | 表头  |
    |  ----  | ----  |
    | 单元格  | 单元格 |
    | 单元格  | 单元格 |</code></pre><p>可以设置对其方式:</p>
<ul>
<li>-: 设置内容和标题栏居右对齐。</li>
<li>:- 设置内容和标题栏居左对齐。</li>
<li>:-: 设置内容和标题栏居中对齐。<pre><code>  | 左对齐 | 右对齐 | 居中对齐 |
  | :-----| ----: | :----: |
  | 单元格 | 单元格 | 单元格 |
  | 单元格 | 单元格 | 单元格 |</code></pre></li>
</ul>
<h2 id="第十式-高级操作"><a href="#第十式-高级操作" class="headerlink" title="第十式 高级操作"></a>第十式 高级操作</h2><p>Markdown还可以做流程图、时序图等高级技巧<br>但我认为这些功能<strong>可以，但没必要用</strong> ，不如直接搞一手visio转图片，多香<br>在此推荐一个编写Markdown的免费编辑器，功能强大<br><a href="https://typora.io/" target="_blank" rel="noopener">typora</a><br>以上就是快速入门Markdown的全部内容啦，看完包会</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2020/01/06/hexo-chang-yong-ming-ling/</url>
    <content><![CDATA[<h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><pre><code>    hexo new [layout] &lt;title&gt;</code></pre><h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><pre><code>    hexo clean //清除之前的东西
    hexo generate //生成静态文章
    hexo deploy // 部署文章</code></pre><h2 id="Hexo开启本地站点"><a href="#Hexo开启本地站点" class="headerlink" title="Hexo开启本地站点"></a>Hexo开启本地站点</h2><pre><code>    hexo s --debug</code></pre><h2 id="Hexo创建标签-分类-其他页面"><a href="#Hexo创建标签-分类-其他页面" class="headerlink" title="Hexo创建标签/分类/其他页面"></a>Hexo创建标签/分类/其他页面</h2><pre><code>    hexo new page tags //新建标签页面
    hexo new page categories //新建分类页面</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
  </entry>
</search>
